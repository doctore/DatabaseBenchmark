/*
 * This file is generated by jOOQ.
 */
package com.database.benchmark.jooq.model.internal.tables;

import com.database.benchmark.jooq.model.internal.Indexes;
import com.database.benchmark.jooq.model.internal.Keys;
import com.database.benchmark.jooq.model.internal.Public;
import com.database.benchmark.jooq.model.internal.tables.records.IngredientRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IngredientTable extends TableImpl<IngredientRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ingredient</code>
     */
    public static final IngredientTable INGREDIENT_TABLE = new IngredientTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IngredientRecord> getRecordType() {
        return IngredientRecord.class;
    }

    /**
     * The column <code>public.ingredient.id</code>.
     */
    public final TableField<IngredientRecord, Short> ID = createField(DSL.name("id"), SQLDataType.SMALLINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.ingredient.name</code>.
     */
    public final TableField<IngredientRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    private IngredientTable(Name alias, Table<IngredientRecord> aliased) {
        this(alias, aliased, null);
    }

    private IngredientTable(Name alias, Table<IngredientRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ingredient</code> table reference
     */
    public IngredientTable(String alias) {
        this(DSL.name(alias), INGREDIENT_TABLE);
    }

    /**
     * Create an aliased <code>public.ingredient</code> table reference
     */
    public IngredientTable(Name alias) {
        this(alias, INGREDIENT_TABLE);
    }

    /**
     * Create a <code>public.ingredient</code> table reference
     */
    public IngredientTable() {
        this(DSL.name("ingredient"), null);
    }

    public <O extends Record> IngredientTable(Table<O> child, ForeignKey<O, IngredientRecord> key) {
        super(child, key, INGREDIENT_TABLE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INGREDIENT_NAME_UINDEX);
    }

    @Override
    public Identity<IngredientRecord, Short> getIdentity() {
        return (Identity<IngredientRecord, Short>) super.getIdentity();
    }

    @Override
    public UniqueKey<IngredientRecord> getPrimaryKey() {
        return Keys.INGREDIENT_PK;
    }

    @Override
    public List<UniqueKey<IngredientRecord>> getKeys() {
        return Arrays.<UniqueKey<IngredientRecord>>asList(Keys.INGREDIENT_PK);
    }

    @Override
    public IngredientTable as(String alias) {
        return new IngredientTable(DSL.name(alias), this);
    }

    @Override
    public IngredientTable as(Name alias) {
        return new IngredientTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IngredientTable rename(String name) {
        return new IngredientTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IngredientTable rename(Name name) {
        return new IngredientTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Short, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
