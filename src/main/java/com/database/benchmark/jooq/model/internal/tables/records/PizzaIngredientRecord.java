/*
 * This file is generated by jOOQ.
 */
package com.database.benchmark.jooq.model.internal.tables.records;

import com.database.benchmark.jooq.model.internal.tables.PizzaIngredientTable;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PizzaIngredientRecord extends UpdatableRecordImpl<PizzaIngredientRecord> implements Record2<Short, Short> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.pizza_ingredient.pizza_id</code>.
     */
    public void setPizzaId(Short value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.pizza_ingredient.pizza_id</code>.
     */
    public Short getPizzaId() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>public.pizza_ingredient.ingredient_id</code>.
     */
    public void setIngredientId(Short value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.pizza_ingredient.ingredient_id</code>.
     */
    public Short getIngredientId() {
        return (Short) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Short, Short> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Short, Short> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Short, Short> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Short> field1() {
        return PizzaIngredientTable.PIZZA_INGREDIENT_TABLE.PIZZA_ID;
    }

    @Override
    public Field<Short> field2() {
        return PizzaIngredientTable.PIZZA_INGREDIENT_TABLE.INGREDIENT_ID;
    }

    @Override
    public Short component1() {
        return getPizzaId();
    }

    @Override
    public Short component2() {
        return getIngredientId();
    }

    @Override
    public Short value1() {
        return getPizzaId();
    }

    @Override
    public Short value2() {
        return getIngredientId();
    }

    @Override
    public PizzaIngredientRecord value1(Short value) {
        setPizzaId(value);
        return this;
    }

    @Override
    public PizzaIngredientRecord value2(Short value) {
        setIngredientId(value);
        return this;
    }

    @Override
    public PizzaIngredientRecord values(Short value1, Short value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PizzaIngredientRecord
     */
    public PizzaIngredientRecord() {
        super(PizzaIngredientTable.PIZZA_INGREDIENT_TABLE);
    }

    /**
     * Create a detached, initialised PizzaIngredientRecord
     */
    public PizzaIngredientRecord(Short pizzaId, Short ingredientId) {
        super(PizzaIngredientTable.PIZZA_INGREDIENT_TABLE);

        setPizzaId(pizzaId);
        setIngredientId(ingredientId);
    }
}
