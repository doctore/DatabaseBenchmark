/*
 * This file is generated by jOOQ.
 */
package com.database.benchmark.jooq.model.internal.tables;

import com.database.benchmark.jooq.model.internal.Keys;
import com.database.benchmark.jooq.model.internal.Public;
import com.database.benchmark.jooq.model.internal.tables.records.OrdersLineRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrdersLineTable extends TableImpl<OrdersLineRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.orders_line</code>
     */
    public static final OrdersLineTable ORDERS_LINE_TABLE = new OrdersLineTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersLineRecord> getRecordType() {
        return OrdersLineRecord.class;
    }

    /**
     * The column <code>public.orders_line.id</code>.
     */
    public final TableField<OrdersLineRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.orders_line.orders_id</code>.
     */
    public final TableField<OrdersLineRecord, Integer> ORDERS_ID = createField(DSL.name("orders_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.orders_line.pizza_id</code>.
     */
    public final TableField<OrdersLineRecord, Short> PIZZA_ID = createField(DSL.name("pizza_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.orders_line.cost</code>.
     */
    public final TableField<OrdersLineRecord, Double> COST = createField(DSL.name("cost"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.orders_line.amount</code>.
     */
    public final TableField<OrdersLineRecord, Short> AMOUNT = createField(DSL.name("amount"), SQLDataType.SMALLINT.nullable(false), this, "");

    private OrdersLineTable(Name alias, Table<OrdersLineRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrdersLineTable(Name alias, Table<OrdersLineRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.orders_line</code> table reference
     */
    public OrdersLineTable(String alias) {
        this(DSL.name(alias), ORDERS_LINE_TABLE);
    }

    /**
     * Create an aliased <code>public.orders_line</code> table reference
     */
    public OrdersLineTable(Name alias) {
        this(alias, ORDERS_LINE_TABLE);
    }

    /**
     * Create a <code>public.orders_line</code> table reference
     */
    public OrdersLineTable() {
        this(DSL.name("orders_line"), null);
    }

    public <O extends Record> OrdersLineTable(Table<O> child, ForeignKey<O, OrdersLineRecord> key) {
        super(child, key, ORDERS_LINE_TABLE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<OrdersLineRecord, Integer> getIdentity() {
        return (Identity<OrdersLineRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrdersLineRecord> getPrimaryKey() {
        return Keys.ORDERS_LINE_PK;
    }

    @Override
    public List<UniqueKey<OrdersLineRecord>> getKeys() {
        return Arrays.<UniqueKey<OrdersLineRecord>>asList(Keys.ORDERS_LINE_PK);
    }

    @Override
    public List<ForeignKey<OrdersLineRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrdersLineRecord, ?>>asList(Keys.ORDERS_LINE__ORDERS_LINE_ORDER_ID_FK, Keys.ORDERS_LINE__ORDERS_LINE_PIZZA_ID_FK);
    }

    private transient OrdersTable _orders;
    private transient PizzaTable _pizza;

    public OrdersTable orders() {
        if (_orders == null)
            _orders = new OrdersTable(this, Keys.ORDERS_LINE__ORDERS_LINE_ORDER_ID_FK);

        return _orders;
    }

    public PizzaTable pizza() {
        if (_pizza == null)
            _pizza = new PizzaTable(this, Keys.ORDERS_LINE__ORDERS_LINE_PIZZA_ID_FK);

        return _pizza;
    }

    @Override
    public OrdersLineTable as(String alias) {
        return new OrdersLineTable(DSL.name(alias), this);
    }

    @Override
    public OrdersLineTable as(Name alias) {
        return new OrdersLineTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrdersLineTable rename(String name) {
        return new OrdersLineTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrdersLineTable rename(Name name) {
        return new OrdersLineTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Short, Double, Short> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
